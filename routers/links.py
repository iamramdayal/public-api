from typing import List
from fastapi import Response, status, HTTPException, APIRouter, Depends
from sqlalchemy import func
from sqlalchemy.orm import Session
import models
import schemas
from database import get_db

router = APIRouter(
    prefix="/links",
    tags=["Links"]
)


# # POST
# @router.post("", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)
# def create_post(
#         post: schemas.PostCreate,
#         db: Session = Depends(get_db),
#         current_user: int = Depends(oauth2.get_current_user)
# ):
#     new_post = models.Post(owner_id=current_user.id, **post.dict())
#     db.add(new_post)
#     db.commit()
#     db.refresh(new_post)
#     return new_post


# GET
@router.get("", response_model=List[schemas.Links])
def get_links(db: Session = Depends(get_db)):
    links = db.query(models.Link).all()
    return links


# # GET[:ID]
# @router.get("/{id}", response_model=schemas.PostOut)
# def get_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):
#     post = db.query(
#         models.Post,
#         func.count(models.Vote.post_id).label("votes")
#     ).join(
#         models.Vote,
#         models.Vote.post_id == models.Post.id,
#         isouter=True
#     ).group_by(models.Post.id).filter(models.Post.id == id).first()
#     if not post:
#         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} was not found")
#     return post
#
#
# # PUT[:ID]
# @router.put("/{id}", response_model=schemas.Post)
# def update_post(
#         id: int,
#         updated_post: schemas.PostCreate,
#         db: Session = Depends(get_db),
#         current_user: int = Depends(oauth2.get_current_user)
# ):
#     post_query = db.query(models.Post).filter(models.Post.id == id)
#     post = post_query.first()
#     if post is None:
#         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} was not found")
#     if post.owner_id != current_user.id:
#         raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not Authorized to perform requested action")
#     post_query.update(updated_post.dict(), synchronize_session=False)
#     db.commit()
#     return post_query.first()
#
#
# # DELETE[:ID]
# @router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
# def delete_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):
#     post_query = db.query(models.Post).filter(models.Post.id == id)
#     post = post_query.first()
#     if post is None:
#         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} does not exist")
#     if post.owner_id != current_user.id:
#         raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not Authorized to perform requested action")
#     post_query.delete(synchronize_session=False)
#     db.commit()
#     return Response(status_code=status.HTTP_204_NO_CONTENT)
